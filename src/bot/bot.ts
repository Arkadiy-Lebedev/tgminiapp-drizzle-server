import dotenv from 'dotenv';
import TelegramBot, { Message, CallbackQuery } from 'node-telegram-bot-api';
import{ initialUser } from '../controllers/users_initial_tg.controller';
import fs from 'fs';
import path from 'path';

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramMessage extends Message {
  text?: string;
}


interface WebAppInfo {
  url: string;
}

interface InlineKeyboardButton {
  text: string;
  web_app?: WebAppInfo;
  callback_data?: string;
}

interface ReplyMarkup {
  inline_keyboard: InlineKeyboardButton[][];
}

dotenv.config();

const token: string = process.env.TOKEN || '';

if (!token) {
  throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

export function createBot() {
  const bot: TelegramBot = new TelegramBot(token, {polling: true});

  const welcomeMessage: string = `–ü—Ä–∏–≤–µ—Ç!  –°–æ–±–∏—Ä–∞–π –ø–∏—Ü—Ü—É –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! `;
  const videoPath: string = path.join(process.cwd(), 'welcome.mp4');
  const videoExists: boolean = fs.existsSync(videoPath);
  const videoUrl: string = 'https://myhookah.ru/video/video.mp4';

  bot.onText(/\/start/, async (msg: TelegramMessage): Promise<void> => {
    const chatId: number = msg.chat.id;
    console.log(msg)
    if(!msg.from?.id){
      return console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–∫–∞');
    }
    const user = await initialUser(msg.from?.username ? msg.from?.username : 'guest', msg.from?.first_name ? msg.from?.first_name : 'guest', msg.chat.id, msg.from?.id)
    
    await bot.sendMessage(chatId, welcomeMessage);  
    // await bot.sendMessage(chatId, '–í–æ—Ç –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–±—è, –æ–∑–Ω–∞–∫–æ–º—å—Å—è:');

    // const sentMsg: Message = await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...');
    
    // await bot.sendVideo(
    //   chatId, 
    //   videoUrl, 
    //   {
    //     caption: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ',
    //     reply_markup: {
    //       inline_keyboard: [[{
    //         text: '‚úÖ –Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª',
    //         callback_data: 'video_watched'
    //       }]]
    //     }
    //   }
    // );
    
    // await bot.deleteMessage(chatId, sentMsg.message_id);

    const replyMarkup: ReplyMarkup = {
      inline_keyboard: [[{
          text: '–í –ò–ì–†–£!!',
          web_app: {
              url: `https://testingbuild.ru/`,
           } 
      }]]
  };

    await bot.sendMessage(
      chatId, 
      '–í —ç—Ç–æ—Ç —á–∞—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏ –∞–∫—Ü–∏—è—Ö –≤ –∏–≥—Ä–µ. –í–ø–µ—Ä–µ–¥!', 
      { reply_markup: replyMarkup }
    );

  });

  // –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ
  // bot.on('callback_query', async (query: CallbackQuery): Promise<void> => {
  //   if (query.data === 'video_watched' && query.message) {
  //       const replyMarkup: ReplyMarkup = {
  //           inline_keyboard: [[{
  //               text: '–í –ò–ì–†–£!!',
  //               web_app: {
  //                   url: `https://testingbuild.ru/`,
  //                } 
  //           }]]
  //       };

  //       await bot.sendMessage(
  //         query.message.chat.id, 
  //         '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É!', 
  //         { reply_markup: replyMarkup }
  //       );
  //   }
  // });

  bot.on('message', (msg: TelegramMessage): void => {
    const chatId: number = msg.chat.id;
    const text: string | undefined = msg.text?.toLowerCase();

    console.log(msg)
    
    if (!text) return;
    
    // if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
    //     bot.sendMessage(chatId, '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üòä');
    // } else if (text.includes('–≤–∏–¥–µ–æ')) {
    //     bot.sendMessage(chatId, '–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–µ –∫—Ä—É—Ç–æ–µ –≤–∏–¥–µ–æ!');
    //     if (videoExists) {
    //         bot.sendVideo(chatId, videoPath);
    //     }
    // } else if (text.includes('–ø–æ–º–æ—â—å') || text.includes('–∫–æ–º–∞–Ω–¥—ã')) {
    //     bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "–ø—Ä–∏–≤–µ—Ç", "–≤–∏–¥–µ–æ", "–ø–æ–º–æ—â—å"');
    // } else if (text.includes('—Å–ø–∞—Å–∏–±–æ')) {
    //     bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ! üôå');
    // }
  });

  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
  return bot;
}